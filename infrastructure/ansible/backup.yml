---
- name: 1. Настройка SSH-доступа для cp (Prod -> Backup)
  hosts: prod
  gather_facts: no
  become: yes
  tags: ["ssh_setup"]

  tasks:
    - name: A. Создание SSH-ключа (id_rsa) на VM Prod, если он не существует
      ansible.builtin.openssh_keypair:
        path: /home/ubuntu/.ssh/id_rsa
        type: rsa
        size: 4096
        state: present
        force: no

    - name: B. Получение публичного ключа с VM Prod
      ansible.builtin.slurp:
        src: /home/ubuntu/.ssh/id_rsa.pub
      register: prod_pub_key

    - name: C. Добавление публичного ключа Prod в authorized_keys на VM Backup
      ansible.posix.authorized_key:
        user: ubuntu
        state: present
        key: "{{ prod_pub_key.content | b64decode }}"
      delegate_to: "{{ groups['backup'][0] }}"
      become: yes

- name: 2. Создание базовых директорий для CP бэкапов на VM Backup
  hosts: backup
  gather_facts: no
  become: yes
  tags: ["dirs"]

  vars:
    base_backup_dir: "/var/backups/cp_manual"

  tasks:
    - name: A. Убедиться, что базовый каталог ({{ base_backup_dir }}) существует
      ansible.builtin.file:
        path: "{{ base_backup_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: "0755"

    - name: B. Убедиться, что папка для {{ groups['prod'][0] }} существует
      ansible.builtin.file:
        path: "{{ base_backup_dir }}/{{ groups['prod'][0] }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: "0755"

- name: 3. Копирование Docker Volumes с Prod на Backup (scp -r)
  hosts: prod
  gather_facts: no
  become: yes
  tags: ["backup"]

  vars:
    dest_host: "{{ groups['backup'][0] }}" # gamestatshub-backup
    source_dir: "/var/lib/docker/volumes/"
    dest_path_name: "{{ inventory_hostname }}" # gamestatshub-prod
    base_backup_dir: "/var/backups/cp_manual"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    final_dest_dir: "{{ base_backup_dir }}/{{ dest_path_name }}/{{ timestamp }}"

  tasks:
    - name: A. Создание целевого каталога на Backup-хосте перед копированием
      ansible.builtin.command:
        cmd: "mkdir -p {{ final_dest_dir }}"
      delegate_to: "{{ dest_host }}"
      become: yes

    - name: B. Копирование Docker Volumes с помощью scp -r
      ansible.builtin.command:
        cmd: scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ source_dir }} ubuntu@{{ dest_host }}:{{ final_dest_dir }}
      register: scp_result

    - name: C. Создание симлинка 'latest' на VM Backup
      ansible.builtin.command:
        cmd: "ln -snf {{ timestamp }} latest"
        chdir: "{{ base_backup_dir }}/{{ dest_path_name }}"
      delegate_to: "{{ dest_host }}"
      become: yes

    - name: D. Вывод результата копирования
      ansible.builtin.debug:
        msg: "Копирование завершено. Бэкап доступен на {{ dest_host }} в папке: {{ final_dest_dir }}. Симлинк 'latest' обновлен."

- name: 4. Настройка автоматического бэкапа через cron
  hosts: prod
  gather_facts: no
  become: yes
  tags: ["cron_setup"]

  vars:
    cron_user: "root" # Меняем на root для доступа к Docker volumes
    cron_name: "docker_volumes_backup"
    backup_script_path: "/usr/local/bin/backup_docker_volumes.sh"
    cron_schedule: "0 2 * * *" # Ежедневно в 2:00 ночи

  tasks:
    - name: A. Копирование скрипта бэкапа на хост
      ansible.builtin.copy:
        src: "files/backup_docker_volumes.sh"
        dest: "{{ backup_script_path }}"
        owner: "root"
        group: "root"
        mode: "0755"
      vars:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: B. Замена переменных в скрипте бэкапа
      ansible.builtin.replace:
        path: "{{ backup_script_path }}"
        regexp: "{{ item.search }}"
        replace: "{{ item.replace }}"
      loop:
        - {
            search: "DEST_HOST=\"\\{\\{ groups\\['backup'\\]\\[0\\] \\}\\}\"",
            replace: 'DEST_HOST="{{ groups[''backup''][0] }}"',
          }
        - {
            search: "DEST_PATH_NAME=\"\\{\\{ inventory_hostname \\}\\}\"",
            replace: 'DEST_PATH_NAME="{{ inventory_hostname }}"',
          }

    - name: C. Добавление задания в cron
      ansible.builtin.cron:
        name: "{{ cron_name }}"
        user: "{{ cron_user }}"
        job: "{{ backup_script_path }} >> /var/log/backup_docker_volumes.log 2>&1"
        minute: "{{ cron_schedule.split()[0] }}"
        hour: "{{ cron_schedule.split()[1] }}"
        day: "{{ cron_schedule.split()[2] }}"
        month: "{{ cron_schedule.split()[3] }}"
        weekday: "{{ cron_schedule.split()[4] }}"

    - name: D. Создание лог-файла с правильными правами
      ansible.builtin.file:
        path: "/var/log/backup_docker_volumes.log"
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"

    - name: E. Проверка настроенного cron
      ansible.builtin.command: crontab -l
      register: cron_check

    - name: F. Вывод информации о настройке cron
      ansible.builtin.debug:
        msg: |
          Автоматический бэкап настроен!
          Расписание: {{ cron_schedule }}
          Скрипт: {{ backup_script_path }}
          Лог-файл: /var/log/backup_docker_volumes.log
          Пользователь: {{ cron_user }}

          Текущие задания cron:
          {{ cron_check.stdout }}
