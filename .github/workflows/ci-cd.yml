name: CI/CD Pipeline for GameStats Hub

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    environment: GameStats Hub
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image name
        id: set-image
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            echo "IMAGE_NAME=svdbel/gamestats-hub-frontend" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_NAME=svdbel/gamestats-hub-backend" >> $GITHUB_OUTPUT
          fi

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ steps.set-image.outputs.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Run Simple Tests
    runs-on: ubuntu-latest
    environment: GameStats Hub
    needs: build
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Simple file structure test
        run: |
          echo "Checking ${{ matrix.service }} structure..."
          ls -la ./${{ matrix.service }}/

          if [ -f "./${{ matrix.service }}/Dockerfile" ]; then
            echo "Dockerfile exists"
          else
            echo "Dockerfile missing"
            exit 1
          fi

      - name: Dockerfile syntax test
        run: |
          echo "Validating Dockerfile syntax..."
          docker build ./${{ matrix.service }} --no-cache --pull --target=build-stage || true

  push:
    name: Push to Registry
    runs-on: ubuntu-latest
    environment: GameStats Hub
    needs: test
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set image name
        id: set-image
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            echo "IMAGE_NAME=svdbel/gamestats-hub-frontend" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_NAME=svdbel/gamestats-hub-backend" >> $GITHUB_OUTPUT
          fi

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ steps.set-image.outputs.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  delivery-deploy:
    name: Delivery and Deploy
    environment: GameStats Hub
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Delivery - Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Starting Delivery process..."
            cd /opt/gamestatshub/

            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Pulling latest images..."
            docker pull ghcr.io/svdbel/gamestats-hub-frontend:latest
            docker pull ghcr.io/svdbel/gamestats-hub-backend:latest

            echo "Deploying services..."
            docker compose -f docker-compose.prod.yml up -d frontend backend

            docker image prune -f

            echo "Delivery and Deploy completed!"

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verifying deployment..."
            cd /opt/gamestatshub/

            echo "Frontend status:"
            docker ps --filter "name=frontend" --format "table {{.Names}}\t{{.Status}}\t{{.RunningFor}}"

            echo "Backend status:"
            docker ps --filter "name=backend" --format "table {{.Names}}\t{{.Status}}\t{{.RunningFor}}"

            echo "Docker compose status:"
            docker compose -f docker-compose.prod.yml ps frontend backend

      - name: Send success notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Delivery and Deploy Successful!
            Repository: ${{ github.repository }}
            By: ${{ github.actor }}
            Completed at: ${{ github.event.head_commit.timestamp }}
            Commit: https://github.com/${{ github.repository }}/commit/${{github.sha}}
